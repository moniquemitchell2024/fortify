
imagePullSecrets: []

# Docker image settings
images:

  api:
    repository: fortifydocker/scancentral-dast-api
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  globalservice:
    repository: fortifydocker/scancentral-dast-globalservice
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  scanner:
    repository: fortifydocker/dast-scanner
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  scannerDatastore:
    repository: mcr.microsoft.com/mssql/server
    tag: "2022-latest"
    pullPolicy: "IfNotPresent"
  utilityservice:
    repository: fortifydocker/dast-scanner
    # tag: "23.2.ubi.8"
    tag: "23.2.ubi.8.6"
    pullPolicy: "IfNotPresent"
  twofactorauth:
    repository: fortifydocker/fortify-2fa
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  wise:
    repository: fortifydocker/wise
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  fortifyConnectServer:
    repository: fortifydocker/scancentral-dast-fortifyconnect
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"
  upgradeJob:
    # This image must include the Securebase if DAST needs to be initialized/upgraded.
    # The image without SecureBase can only be used for ScanCentral DAST configuration.
    repository: fortifydocker/scancentral-dast-config
    tag: "23.2.ubi.8"
    pullPolicy: "IfNotPresent"

    repositoryKubectl: bitnami/kubectl
    tagKubectl: "latest"
    pullPolicyKubectl: "IfNotPresent"


# If not provided Helm will create a DAST Secret based on this values file. Refer to secret/secret.yaml template
# to learn about expected secret fields
secretName: ""

# On autodeploy mode DAST will create/migrate/update the backend database
# accordingly on every helm upgrade
autoDeploy: true

# Log level
logLevel: Information

# DAST configuration.
configuration:
  # Refer to the Fortify ScanCentral DAST Configuration and Usage Guide for more details.
  # Environment variable placeholders may be used in the format ${ENVIRONMENT VARIABLE NAME}. Any environment variable placeholder will be replaced during runtime.
  # The upgrade job has the following environment variables pre-configured that can be used in the configuration:
  #   - SCANCENTRAL_DAST_API_SERVICE: Points to API's Kubernetes service
  #   - SCANCENTRAL_DAST_UTILITYSERVICE_SERVICE: Points to Utility Service's Kubernetes service
  databaseSettings:
    # databaseProvider indicates the type of database that will be used.
    # Allowed values: SQLServer, PostgreSQL, AzureSQLServer, AzurePostgreSQL, AmazonRdsSQLServer, AmazonRdsPostgreSQL
    databaseProvider: SQLServer
    server: MyServer
    database: DAST
    # dboLevelDatabaseAccount is not required if the database already exists and migration scripts have already been applied.
    # A migration script can be created using the 'generateMigrationScript' command.
    dboLevelDatabaseAccount:
      username: username
      # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      password: password
      # Allowed values: true, false
      useWindowsAuthentication: false
      additionalConnectionProperties:
    standardDatabaseAccount:
      username: username
      # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      password: password
      # Allowed values: true, false
      createLogin: false
      additionalConnectionProperties:
  # Allowed values: true, false
  retainCompletedScans: false
  # Allowed values: true, false
  disableAdvancedScanPrioritization: false
  # Allowed values: true, false
  enableRestrictedScanSettings: false
  # An encrypted serviceToken is recommended. The password can be encrypted using the 'encrypt' command.
  serviceToken: minimum_10_characters
  smartUpdateSettings:
    smartUpdateUrl: https://smartupdate.fortify.microfocus.com/
    licensingUrl: https://licenseservice.fortify.microfocus.com/
  sSCSettings:
    sSCRootUrl: http://ssc
    serviceAccountUserName: username
    serviceAccountPassword: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  dASTApiSettings:
    rootUrl: http://${SCANCENTRAL_DAST_API_SERVICE}
    disableCorsOrigins: false # Allowed values: true, false
    # One ore more corsOrigins entries is required if disableCorsOrigins = false
    # Each entry should be on a separate line and start with a dash (-) followed by a space
    corsOrigins:
      - http://ssc
      - http://${SCANCENTRAL_DAST_API_SERVICE}
  lIMSettings:
    limUrl: https://lim-server-instance/
    serviceAccountUserName: username
    serviceAccountPassword: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    defaultLimPoolName: username
    defaultLimPoolPassword: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
    useLimRestApi: true # Allowed values: true, false
  utilityWorkerServiceSettings:
    rootUrl: http://${SCANCENTRAL_DAST_UTILITYSERVICE_SERVICE}
  dastApiSSLSettings:
    sSLPreferenceType: NoSSL # Allowed values: GenerateCertificate, UseExistingCertificate, NoSSL
    # generateCertificateModel is required if sSLPreferenceType =  GenerateCertificate
    generateCertificateModel:
      certificateDirectory: /directory_where_certificate_is_saved
      host: dast-api
      password: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      validity: 1000
      location: Alpharetta
      email: email@domain.com
    # existingCertificateModel is required if sSLPreferenceType =  UseExistingCertificate
    existingCertificateModel:
      certificateFullPath: /path_to_cert/dast_api.cert
      password: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  utilityWorkerServiceSSLSettings:
    sSLPreferenceType: NoSSL # Allowed values: GenerateCertificate, UseExistingCertificate, NoSSL
    # generateCertificateModel is required if sSLPreferenceType =  GenerateCertificate
    generateCertificateModel:
      certificateDirectory: /directory_where_certificate_is_saved
      host: dast-utility-service
      password: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      validity: 1000
      location: Alpharetta
      email: email@domain.com
    # existingCertificateModel is required if sSLPreferenceType =  UseExistingCertificate
    existingCertificateModel:
      certificateFullPath: /path_to_cert/dast_utility_service.cert
      password: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
  environmentSettings:
    allowNonTrustedServerCertificate: true # Allowed values: true, false
    proxySettings:
      useProxy: false # Allowed values: true, false
      proxyAddress: http://proxy-instance.com:8080
      proxyPassword: password # An encrypted password is recommended. The password can be encrypted using the 'encrypt' command.
      proxyUserName: username
      proxyBypassList: dast-api,dast-utility-service,lim-server-instance,ssc-instance
  applySecureBase: true # Allowed values: true, false
  # secureBasePath is required if applySecureBase =  true
  secureBasePath: /app/DefaultData.zip
  debrickedSettings:
    accessToken: # The access token obtained from Debricked.
  fortifyConnectServerSettings:
    disableFortifyConnectServer: true
    # Internal FortifyConnectServer host. Using this env variable it gets configured automatically.
    internalHost: ${SCANCENTRAL_DAST_FORTIFYCONNECTSERVER_INTERNAL_SERVICE}
    # internalPort must match fortifyConnectServer.service.internal.port
    internalPort: 2022
    # FortifyConnectServer external host advertised at ScanCentral DAST UI
    # FortifyConnectClient will connect to this host
    externalHost: "fortify-connect.scancentral-dast.mydomain.com"
    externalPort: 2022
    publicKeyContents: ""
    privateKeyContents: ""


# Ingress settings
ingress:

  api:
    enabled: false
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"

      # NGINX restricts uploads to 1M by default, you must use the following annotation
      # to increase the max upload size
      # nginx.ingress.kubernetes.io/proxy-body-size: 16m
    hosts:
      - host: dast-api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: tls-secret
    #    hosts:
    #      - scdast-api.local

  twofactorauth:
    enabled: false
    className: ""
    annotations:
      # kubernetes.io/ingress.class: nginx

      # twofactor auth uses https in the backend
      # nginx.ingress.kubernetes.io/backend-protocol: https

      # twofactorauth uses WebSockets. If using nginx, these annotations are necessary
      # in order to keep the WebSockets open enough time to be functional
      # https://kubernetes.github.io/ingress-nginx/user-guide/miscellaneous/#websockets
      # nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
      # nginx.ingress.kubernetes.io/proxy-send-timeout: 3600
    hosts:
      - host: dast-2fa.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

# Kubernetes configuration for specific components
# Current values should work, only authentication tokens must be changed.

api:

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  service:
    type: ClusterIP
    port: 80

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

globalservice:

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

utilityservice:

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  service:
    type: ClusterIP
    port: 80

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

scanner:

  nameOverride:

  replicas: 1

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

# WISE requires haproxy-ingress and metrics server at the cluster. See:
# - https://artifacthub.io/packages/helm/haproxy-ingress/haproxy-ingress/
# - https://github.com/kubernetes-sigs/metrics-server
wise:

  # Enable WebInspect Script Engine
  enabled: false

  authenticationToken: "CHANGEMEAuthenticationTokenMinimum36Characters"

  # If not on Azure, ingressHost needs to resolve to haproxy pod's IP (pod IP, not service IP).
  # This is a limitation observed in clusters that combine Windows and Linux nodes. Kubernetes fails to
  # set the Source IP for packets coming from Windows pods and sent to Kubernetes services. Using the pod IP
  # instead of the service IP fixes the issue.
  # Tip: Use nip.io subdomains. For example, after "kubectl get pod -o wide" you find that haproxy's IP is
  # 10.240.0.224 . If you set ingressHost to wise.dast.10-240-0-224.nip.io, it will resolve to the right IP.
  # At DAST Web UI you'll set the Scan Scaling host to ws://wise.dast.10-240-0-224.nip.io
  ingressHost: ""

  replicas:
    autoscale: true
    min: 2
    max: 10
    cpu:
      # WISE pods will request X cores and will scale when they reach 80% of the CPU capacity
      cores: 4

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  service:
    type: ClusterIP
    httpPort: 9442
    httpsPort: 9443

  resources:
    requests:
      cpu:
        cores: 4

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

twofactorauth:

  enabled: false

  masterToken: "CHANGEMEMasterTokenMinimum36Characters"

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  service:
    type: ClusterIP
    port: 443

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}

upgradeJob:

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  affinity: {}

  tolerations: []


fortifyConnectServer:

  enabled: false

  # Install the bundled Network Policy
  # Fortify Connect is based on an SSH Server and uses its port forwarding capabilities. It has 2 operation modes:
  # - Remote: allows DAST scanners reach the network where Fortify Connect client is running from.
  # - Local: allows remote scanners to connect to DAST API through the Fortify Connect client.
  # Although the SSH server has been configured to disallow insecure operations, implementing a Network Policy
  # on the Fortify Connect server pod is recommended too, specially if localPortForwardingEnabled is true. An
  # authenticated ssh client could use local port forwarding to send traffic to internal's cluster network from the
  # Fortify Connect server pod.
  # The bundled Network Policy blocks all egress if localPortForwardingEnabled is false. If true it will only allow
  # egress to the internal scancentral-dast-api and DNS queries.
  # Clusters rarely enforce Network Policies by default. Check these references to enforce network policies:
  #
  # On self-hosted clusters, see Calico (https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises)
  # On AWS EKS, see https://docs.aws.amazon.com/eks/latest/userguide/cni-network-policy.html
  # On Azure AKS, see https://learn.microsoft.com/en-us/azure/aks/use-network-policies
  # On Google GKE, see https://cloud.google.com/kubernetes-engine/docs/how-to/network-policy
  networkPolicyEnabled: true

  # Enable Local Port Forwarding on the SSH Server
  # Set this to true if you plan to use FortifyConnect in Local mode
  # Local mode allows to use an external scanner and use Fortify Connect client to connect to DAST API.
  # It is strongly recommended to enable the Network Policy if this is enabled (see networkPolicyEnabled).
  localPortForwardingEnabled: false

  # Allows to specify a sshd_config template.
  # See resources/fortifyconnectserver-sshd_config.template
  sshdConfigTemplate: ""

  # Use container's default sshd_config tempalte or use chart's
  # Chart's sshd_config template is a more hardened sshd_config
  # See resources/fortifyconnectserver-sshd_config.template .
  useDefaultContainerSshdConfigTemplate: false

  podAnnotations: {}

  extraPodLabels: {}

  podSecurityContext: {}

  securityContext: {}

  additionalEnvironment: []

  service:
    external:
      type: ClusterIP
      port: 2022
      nodePort: ""
      annotations: {}
    internal:
      # ScanCentral DAST API and scanners must connect to Fortify Connect server internally
      port: 2022

  resources: {}

  nodeSelector:
    kubernetes.io/os: linux

  tolerations: []

  affinity: {}
